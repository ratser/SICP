#lang r5rs
(#%require "error.rkt")
(#%require "table.rkt")

;;; table for installing eval procedures of special form
(define special-form-table (make-anyD-table))
(define (put-eval tag proc)
  ((special-form-table 'insert!) (list tag) proc))
(define (get-eval tag)
  ((special-form-table 'lookup) (list tag)))

;;; eval procedure, named my-eval to distinguish it
;;; from the build in eval procedure
(define (my-eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((get-eval (get-tag exp))
         ((get-eval (get-tag exp)) exp env))
        ((application? exp)
         (my-apply (actual-value (operator exp) env)
                   (operands exp) 
                   env))
        (else
         (error "Unknown expression type -- MY-EVAL" exp))))

;;; apply procedure, named my-apply to distinguish it
;;; from the build in apply procedure
(define (my-apply proc arguments env)
  (cond ((primitive-procedure? proc)
         (apply-primitive-procedure proc 
                                    (list-of-arg-values arguments env)))
        ((compound-procedure? proc)
         (eval-sequence
          (procedure-body proc)
          (extend-environment
           (procedure-parameters proc)
           (list-of-delayed-args arguments env)
           (procedure-environment proc))))
        (else
         (error "Unknown procedure type -- MY-APPLY" proc))))

;;; procedures for my-apply
(define (list-of-arg-values exps env)
  (if (no-operands? exps)
      '()
      (cons (actual-value (first-operand exps) env)
            (list-of-arg-values (rest-operands exps) env))))
  (define (list-of-delayed-args exps env)
    (if (no-operands? exps)
        '()
        (cons (delay-it (first-operand exps) env)
              (list-of-delayed-args (rest-operands exps) env))))
(define (eval-sequence exps env)
  (cond ((last-exp? exps) (my-eval (first-exp exps) env))
        (else (my-eval (first-exp exps) env)
              (eval-sequence (rest-exps exps) env))))

;;; procedures for lazy evaluation
(define (actual-value exp env)
  (force-it (my-eval exp env)))
;(define (force-it obj)
;  (if (thunk? obj)
;      (actual-value (thunk-exp obj)
;                    (thunk-env obj))
;      obj))
(define (delay-it exp env)
  (list 'thunk exp env))
(define (thunk? obj)
  (tagged-list? obj 'thunk))
(define (thunk-exp thunk) (cadr thunk))
(define (thunk-env thunk) (caddr thunk))
(define (evaluated-thunk? obj)
  (tagged-list? obj 'evaluated-thunk))
(define (thunk-value evaluated-thunk)
  (cadr evaluated-thunk))
(define (force-it obj)
  (cond ((thunk? obj)
         (let ((result (actual-value
                        (thunk-exp obj)
                        (thunk-env obj))))
           (set-car! obj 'evaluated-thunk)
           (set-car! (cdr obj) result)
           (set-cdr! (cdr obj) '())
           result))
        ((evaluated-thunk? obj)
         (thunk-value obj))
        (else obj)))


;;; define eval procedures for special forms
(define (eval-if exp env)
  (if (true? (actual-value (if-predicate exp) env))
      (my-eval (if-consequent exp) env)
      (my-eval (if-alternative exp) env)))
(define (eval-assignment exp env)
  (set-variable-value! 
   (assignment-variable exp)
   (my-eval (assignment-value exp) env)
   env))
(define (eval-definition exp env)
  (define-variable!
    (definition-variable exp)
    (my-eval (definition-value exp) env)
    env))
(define (eval-quoted exp env)
  (text-of-quotation exp))
(define (eval-begin exp env)
  (eval-sequence (begin-actions exp) env))
(define (eval-lambda exp env)
  (make-procedure (lambda-parameters exp)
                  (lambda-body exp)
                  env))
(define (eval-cond exp env)
  (my-eval (cond->if exp) env))
(define (eval-or exp env)
  (my-eval (or->if exp) env))
(define (eval-and exp env)
  (my-eval (and->if exp) env))
(define (eval-not exp env)
  (my-eval (not->if exp) env))
(define (eval-let exp env)
  (my-eval (let->combination exp) env))
(define (eval-let* exp env)
  (my-eval (let*->nested-lets exp) env))
(define (eval-make-unbound! exp env)
  (if (variable? (unbound-variable exp))
      (let ((frame (first-frame env)))
        (let ((vars (frame-variables frame))
              (vals (frame-values frame)))
          (define (scan vars vals f)  ;;; continuation passing style
            (cond ((null? vars)
                   (f '() '()))
                  ((eq? (unbound-variable exp) (car vars))
                   (scan (cdr vars) (cdr vals) f))
                  (else
                   (scan
                    (cdr vars)
                    (cdr vals)
                    (lambda (rest-vars rest-vals)
                      (f (cons (car vars) rest-vars)
                         (cons (car vals) rest-vals)))))))
          (scan vars vals (lambda (new-vars new-vals)
                            (set-car! frame new-vars)
                            (set-cdr! frame new-vals)))))
      (error "Invalid variable -- MAKE-UNBOUND!" (unbound-variable exp)))
  )
(define (eval-letrec exp env)
  (my-eval (letrec->let exp) env))

;;; install eval procedures for special forms
(put-eval 'if eval-if)
(put-eval 'set! eval-assignment)
(put-eval 'define eval-definition)
(put-eval 'quote eval-quoted)
(put-eval 'begin eval-begin)
(put-eval 'lambda eval-lambda)
(put-eval 'cond eval-cond)
(put-eval 'or eval-or)
(put-eval 'and eval-and)
(put-eval 'not eval-not)
(put-eval 'let eval-let)
(put-eval 'let* eval-let*)
(put-eval 'make-unbound! eval-make-unbound!)
(put-eval 'letrec eval-letrec)
;;; represent expressions
(define (get-tag exp) (car exp))
(define (self-evaluating? exp)
  (cond ((number? exp) #t)
        ((string? exp) #t)
        (else #f)))
(define (variable? exp)
  (symbol? exp))
(define (text-of-quotation exp)
  (cadr exp))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
      (cadddr exp)
      'false))
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))
(define (assignment-variable exp)
  (cadr exp))
(define (assignment-value exp)
  (caddr exp))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp) (cddr exp))))
(define (lambda-parameters exp)
  (cadr exp))
(define (lambda-body exp)
  (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
(define (begin-actions exp)
  (cdr exp))
(define (last-exp? seq)
  (null? (cdr seq)))
(define (first-exp seq)
  (car seq))
(define (rest-exps seq)
  (cdr seq))
(define (seq->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))
(define (make-begin seq)
  (cons 'begin seq))
(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no-operands? ops) (null? ops))
(define (first-operand ops) (car ops))
(define (rest-operands ops) (cdr ops))
(define (unbound-variable exp)
  (cadr exp))
;;; derived expressions
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause)
  (car clause))
(define (cond-actions clause) (cdr clause))
(define (cond=>clause? clause)
  (eq? (cadr clause) '=>))
(define (cond-func clause)
  (caddr clause))
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
      'false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (cond ((cond-else-clause? first)
               (if (null? rest)
                   (seq->exp (cond-actions first))
                   (error "ELSE clause isn't last -- COND->IF"
                          clauses)))
              ((cond=>clause? first)
               (make-if
                (cond-predicate first)
                (cons (cond-func first) 
                      (cons (cond-predicate first) '()))
                (expand-clauses rest)))
              (else (make-if
                     (cond-predicate first)
                     (seq->exp (cond-actions first))
                     (expand-clauses rest)))))))
(define (or-seq exp)
  (cdr exp))
(define (or->if exp)
  (expand-or (or-seq exp)))
(define (expand-or seq)
  (if (last-exp? seq)
      (first-exp seq)
      (make-if
       (first-exp seq)
       (first-exp seq)
       (expand-or (rest-exps seq)))))
(define (and-seq exp)
  (cdr exp))
(define (and->if exp)
  (expand-and (and-seq exp)))
(define (expand-and seq)
  (if (last-exp? seq)
      (first-exp seq)
      (make-if
       (first-exp seq)
       (expand-and (rest-exps seq))
       'false)))
(define (not-exp exp)
  (cadr exp))
(define (not->if exp)
  (make-if
   (not-exp exp)
   'false
   'true))
(define (let-variables exp)
  (map car (cadr exp)))
(define (let-exps exp)
  (map cadr (cadr exp)))
(define (let-body exp)
  (cddr exp))

(define (named-let? exp)
  (not (pair? (cadr exp))))
(define (let-name exp)
  (cadr exp))
(define (let-variables-named exp)
  (map car (caddr exp)))
(define (let-exps-named exp)
  (map cadr (caddr exp)))
(define (let-body-named exp)
  (cdddr exp))
(define (make-definition var exp)
  (list 'define var exp))

(define (let->combination exp)
  (if (named-let? exp)
      (cons
       (make-lambda (let-variables-named exp)
                    (cons
                     (make-definition
                      (let-name exp)
                      (make-lambda (let-variables-named exp)
                                   (let-body-named exp)))
                     (let-body-named exp)))
       (let-exps-named exp))
      (cons
       (make-lambda (let-variables exp)
                    (let-body exp))
       (let-exps exp))))

(define (make-let bindings body)
  (cons 'let (cons bindings body)))
(define (let*-bindings exp)
  (cadr exp))
(define (first-binding bindings)
  (list (car bindings)))
(define (rest-bindings bindings)
  (cdr bindings))
(define (last-binding? bindings)
  (null? (cdr bindings)))
(define (let*-body exp)
  (cddr exp))
(define (let*->nested-lets exp)
  (let*-expand (let*-bindings exp)
               (let*-body exp)))
(define (let*-expand bindings body)
  (if (last-binding? bindings)
      (make-let bindings body)
      (make-let (first-binding bindings)
                (list (let*-expand (rest-bindings bindings)
                             body)))))
;;; exercise 4.20
(define (letrec-variables exp)
  (map car (cadr exp)))
(define (letrec-exps exp)
  (map cadr (cadr exp)))
(define (letrec-body exp)
  (cddr exp))
(define (letrec->let exp)
  (define (make-let-var vars)
    (map (lambda (var)
           (list var (make-quoted 'unassigned)))
         vars))
  (define (make-let-body vars exps body)
    (append (map (lambda (var exp)
                   (make-assignment var exp))
                 vars exps)
            body))
  (make-let (make-let-var (letrec-variables exp))
            (make-let-body (letrec-variables exp)
                           (letrec-exps exp)
                           (letrec-body exp))))

;;; Evaluator data structure ;;;
(define (true? x)
  (not (eq? x 'false)))
(define (false? x)
  (eq? x 'false))

;;; exercise 4.16
(define (split seq f)
  (let ((exp (first-exp seq)))
    (if (last-exp? seq)
        (if (definition-exp? exp)
            (f seq '())
            (f '() seq))
        (if (definition-exp? exp)
            (split (rest-exps seq)
                   (lambda (defs other)
                     (f (cons exp defs) other)))
            (split (rest-exps seq)
                   (lambda (defs other)
                     (f defs (cons exp other))))))))
(define (definition-exp? exp)
  (eq? (car exp) 'define)) 
(define (make-new-body defs rest)
  (define (extract-vars defs)
    (map (lambda (exp) 
           (list (definition-variable exp) (make-quoted '*unassigned*)))
         defs))
  (define (extract-vals defs)
    (map (lambda (exp)
           (make-assignment (definition-variable exp) (definition-value exp)))
         defs))
  (if (null? defs)
      rest
      (list (make-let
             (extract-vars defs)
             (append (extract-vals defs) rest)))))

;exercise 4.17
;(define (make-new-body defs rest)
;  (append defs rest))

(define (make-quoted x)
  (list 'quote x))
(define (make-assignment var val)
  (list 'set! var val))    
(define (scan-out-defines seq)
  (split seq make-new-body))

(define (make-procedure parameters body env)
  (list 'procedure parameters (scan-out-defines body) env))

(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (tagged-list? p tag)
  (if (pair? p)
      (eq? (car p) tag)
      #f))
(define (procedure-parameters p) (cadr p))
(define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p))

;;; implement environment ;;;
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())
(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame)
  (car frame))
(define (frame-values frame)
  (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (error "The number of arguments and values is mismatched")))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (if (eq? (car vals) '*unassigned*)
                 (error "Unassigned variable" var)
                 (car vals)))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))

;;;; exercise 4.11
;
;(define (enclosing-environment env) (cdr env))
;(define (first-frame env) (car env))
;(define the-empty-environment '())
;
;(define (make-frame variables values)
;  (map cons variables values))
;
;(define (add-binding-to-env! var val env)
;  (set-car! env (cons (cons var val) (first-frame env))))
;
;(define (extend-environment vars vals base-env)
;  (if (= (length vars) (length vals))
;      (cons (make-frame vars vals) base-env)
;      (error "The number of arguments and values is mismatched")))
;(define (lookup-variable-value var env)
;  (define (env-loop env)
;    (define (scan frame)
;      (cond ((null? frame)
;             (env-loop (enclosing-environment env)))
;            ((eq? var (caar frame))
;             (cdar frame))
;            (else (scan (cdr frame)))))
;    (if (eq? env the-empty-environment)
;        (error "Unbound variable" var)
;        (scan (first-frame env))))
;  (env-loop env))
;
;(define (set-variable-value! var val env)
;  (define (env-loop env)
;    (define (scan frame)
;      (cond ((null? frame)
;             (env-loop (enclosing-environment env)))
;            ((eq? var (caar frame))
;             (set-cdr! (car frame) val))
;            (else (scan (cdr frame)))))
;    (if (eq? env the-empty-environment)
;        (error "Unbound variable -- SET!" var)
;        (scan (first-frame env))))
;  (env-loop env))
;
;(define (define-variable! var val env)
;  (define (scan frame)
;    (cond ((null? frame)
;           (add-binding-to-env! var val env))
;          ((eq? var (caar frame))
;           (set-cdr! (car frame) val))
;          (else (scan (cdr frame)))))
;    (scan (first-frame env)))

;;;set up global environment with primitives;;;
(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true 'ture initial-env)
    (define-variable! 'false 'false initial-env)
    initial-env))

(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))
(define (bool-convert f)
  (lambda x
    (if (apply f x)
        'true
        'false)))
(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? (bool-convert null?))
        (list 'pair? (bool-convert pair?))
        (list 'number? (bool-convert number?))
        (list 'symbol? (bool-convert symbol?))
        (list 'eq? (bool-convert eq?))
        (list 'list list)
        (list '= (bool-convert =))
        (list '> (bool-convert >))
        (list '< (bool-convert <))
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list 'remainder remainder)))
(define (primitive-procedure-names)
  (map car primitive-procedures))
(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))
(define (apply-primitive-procedure proc args)
  (apply (primitive-implementation proc) args))

;;;prompt interface;;;
(define input-prompt "lazy-eval input:")
(define output-prompt "lazy-eval value:")
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (actual-value input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
(define (prompt-for-input string)
  (newline)
  (display string)
  (newline))
(define (announce-output string)
  (newline)
  (display string)
  (newline))
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))

(define the-global-environment (setup-environment))
(driver-loop)

    
  
